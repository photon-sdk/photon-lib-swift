//
//  Validation.swift
//  BTCPhotonKit
//
//  Created by Leon Johnson on 04/01/2021.
//  Copyright © 2021 Leon Johnson. All rights reserved.
//

import Foundation

public enum Verify {
     // Verifies that a parameter belongs to a given type.
    
    public static func isEmail(_ email: String) -> Bool {
        /**
         - Parameters:
         - email: The email address entered by the user
         
         - Throws: None
         
         - Returns: Bool
         */
        // is this a valid email address?
        let emailRegEx = "(?:[a-zA-Z0-9!#$%\\&‘*+/=?\\^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%\\&'*+/=?\\^_`{|}" +
        "~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\" +
        "x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-" +
        "z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5" +
        "]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-" +
        "9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21" +
        "-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])"
        let emailPred = NSPredicate(format:"SELF MATCHES %@", emailRegEx)
        return emailPred.evaluate(with: email)
    }
    
    public static func isPhone(_ phone_number: String) -> Bool {
        /**
         - Parameters:
         - phone_number: The phone_number entered by the user
         
         - Throws: None
         
         - Returns: Bool
         */
        
        // is this a valid phone number?
        let phone_regex = "^\\+[1-9]\\d{1,14}$"
        let phoneTest = NSPredicate(format: "SELF MATCHES %@", phone_regex)
        if phoneTest.evaluate(with: phone_number) {
            return (true)
        }
        return false
    }
    
    public static func isCode(_ code: String) -> Bool {
        /**
         - Parameters:
         - code: The code generated by the Photon server
         
         - Throws: None
         
         - Returns: Bool
         */
        // is this a valid (recovery) code?
        let codeRegEx = "^\\d{6}$"
        let codePred = NSPredicate(format:"SELF MATCHES %@", codeRegEx)
        return codePred.evaluate(with: code)
    }
    
    public static func isPin(_ pin: String) -> Bool {
        /**
         - Parameters:
         - pin: The pin selected by the user
         
         - Throws: None
         
         - Returns: Bool
         */
        // is this a valid pin?
        let newlines = CharacterSet.newlines
        let disallowed = newlines.inverted
        let range_of_newlines = pin.rangeOfCharacter(from: disallowed)
        if range_of_newlines == nil {
            let pinRegEx = "^.{4,256}$"
            let pinPred = NSPredicate(format:"SELF MATCHES %@", pinRegEx)
            return pinPred.evaluate(with: pin)
        } else {
            return false
        }
    }
    
    public static func isId(_ id: String) -> Bool {
        /**
         - Parameters:
         - id: The id generated by the Photon server
         
         - Throws: None
         
         - Returns: Bool
         */
        // answers: is this a valid id?
        
        let idRegEx = "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
        let idPred = NSPredicate(format:"SELF MATCHES %@", idRegEx)
        return idPred.evaluate(with: id)
    }
    
    public static func isBuffer(_ cipherText: Data?) -> Bool {
        guard let data = cipherText else{
            return false
        }
        return !data.isEmpty
    }
    
    public static func isString(_ stringValue: Any?) -> Bool {
            return stringValue != nil && stringValue is String
        }

    public static func isObject(_ objVeriable: Any?) -> Bool {
        return  objVeriable != nil
    }
    
}
